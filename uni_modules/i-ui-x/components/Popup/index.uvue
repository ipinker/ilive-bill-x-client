<template>
	<view class="IPopupMask" ref="popupMaskRef" 
		:class="popupCls"
		:style="[bg(maskBgColor || 'colorBgMask'), popupStyle]"
		@tap.stop="handleClose" 
	>
		<view class="IPopupBody col" ref="popupRef" 
			:class="{
				'IPopupBodySafrArea': safeArea && isPhone
			}"
			:style="[bg(bgColor || 'colorBgContainer'), popupBodyStyle, styles]"
			@tap.stop="clear" 
			@touchmove.stop="clear"
		>
			<slot />
		</view>
	</view>
</template>
<script lang="uts" setup>
	import { type Ref, ref, watch, computed, nextTick } from "vue"
	import { config, PopupTypeItem, popupProps, PopupPropsType, PopupRef, Animation } from "./popup";
	import { useStyle } from "../../hooks/useStyle";
	import { StyleValue } from '../../typing';
	import { CHANGE_EVENT, CLOSE_EVENT, OPEN_EVENT, UPDATE_SHOW_EVENT, DEFAULT_STYLE } from '../../common/constants';
	
	const props: PopupPropsType = defineProps(popupProps);
	const emits = defineEmits([CHANGE_EVENT, CLOSE_EVENT, OPEN_EVENT, UPDATE_SHOW_EVENT]);
	const { bg } = useStyle();
	/** @desc H5 的穿透问题 **/
	const isShow: Ref<boolean> = ref(false);
	watch(isShow, (newVal: boolean) => {
		// #ifdef H5
		document.getElementsByTagName('body')[0].style.overflow = newVal ? 'hidden' : 'visible'
		// #endif
	})
	/** @desc 显示和开始 **/
	watch(() => props.show, (newVal: boolean) => {
		if (newVal) return openAnimation();
		if(isShow.value) closeAnimation();
	}, { immediate : true });
	
	const popupRef: Ref<Element | null> = ref(null);
	const popupMaskRef: Ref<Element | null> = ref(null);
	const popupStyle = computed<StyleValue>((): StyleValue => {
		const styleVal: StyleValue = {
			"z-index": props.zIndex
		} 
		return styleVal;
	})
	const popupBodyStyle = computed<StyleValue>((): StyleValue => {
		const styleVal: StyleValue = {
			
		}
		return styleVal;
	})
	
	let openType: Ref<PopupTypeItem | null> = ref();
	let _type = computed<PopupTypeItem>((): PopupTypeItem => openType.value || props.type || "center")
	const popupCls = computed<string>((): string => {
		let cls: string = "";
		switch (_type.value) {
			case "slide-bottom":
			case "share":
			case "bottom":
				cls = "flex-column-align-center flex-column-justify-end bottom";
				break;
			case "top":
			case "slide-top":
			case "message":
				cls = "flex-column-align-center flex-column-justify-start top";
				break;
			case "left":
			case "slide-left":
				cls = "flex-column-align-start flex-column-justify-center left";
				break;
			case "slide-right":
			case "right":
				cls = "flex-column-align-end flex-column-justify-center right";
				break;
			default:
				cls = "flex-column-center center";
		}
		console.log(cls)
		return cls;
	})
	
	
	function handleOpen(type?: PopupTypeItem) {
		if(type) openType.value = type;
		openAnimation();
		emits(OPEN_EVENT);
	}
	function handleClose() {
		if(props.isMaskClick){
			handleForceClose();
		}
	}
	function handleForceClose() {
		emits(UPDATE_SHOW_EVENT, false);
		emits(CLOSE_EVENT);
		if(isShow.value) closeAnimation();
	}
	
	
	let animation: Ref<Animation | null> = ref(null);
	function closeAnimation() {	
		if(!animation.value) return;
		isShow.value = false;
		_animation(false);
		emits(CHANGE_EVENT, { show: false })
		animation.value = null;
		console.log("CLOSE : ", _type.value)
	}
	function openAnimation() {
		isShow.value = true;
		console.log("OPEN : ", _type.value)
		animation.value = new Animation(_type.value);
		nextTick(() => {
			setTimeout(() => {
				_animation(true);
				emits(CHANGE_EVENT, { show: true })
			}, 50);
		})
	}
	function _animation(show: boolean) {
		
		show && setElStyle('opacity', '1', "number");
		// @ts-ignore
		popupMaskRef.value!.style.setProperty("opacity", show ? 1 : 0);
		let style: StyleValue = {}
		switch (_type.value) {
			case "left":
			case "slide-left":
				style = animation.value!.left(show);
				break;
			case "slide-right":
			case "right":
				style = animation.value!.right(show);
				break;
			case "top":
			case "slide-top":
			case "message":
				style = animation.value!.top(show);
				break;
			case "slide-bottom":
			case "share":
			case "bottom":
				style = animation.value!.bottom(show);
				break;
			case "opacity":
			case "fade":
				style = animation.value!.opacity(show);
				break;
			case "zoom-out":
			case "reverseCenter":
				style = animation.value!.reverseCenter(show);
				break;
			default :
				style = animation.value!.center(show);
				break;
		}
		if (show) {
			// @ts-ignore
			popupMaskRef.value!.style.setProperty("visibility", "visible");
			Object.keys(style).forEach((property) => {
				setElStyle(property, style[property]);
			})
			// setElStyle('visibility', 'visible');
		} else {
			popupMaskRef.value!.style.setProperty("visibility", "hidden");
			Object.keys(style).forEach((property) => {
				setElStyle(property, style[property]);
			})
			setTimeout(() => {
				// @ts-ignore
				
				// setElStyle('visibility', 'hidden');
			}, props.duration || DEFAULT_STYLE.duration)
		}
	}
	
	
	/**
	 * 设置元素的样式
	 */
	function setElStyle(key : string, value : string, type ?: "number" | "string") {
		// @ts-ignore
		if (key) popupRef.value!.style.setProperty(key, type == "number" ? Number(value) : value);
	}
	/** @desc 判断是否为 iOS **/
	function isPhone() : boolean {
		// #ifdef APP-IOS || MP || H5
		if (!props.safeArea) return false;
		//34px
		const res : GetSystemInfoResult = uni.getSystemInfoSync();
		let iphonex = false;
		let models = ['iphonex', 'iphonexr', 'iphonexsmax']
		for (let i = 11; i < 20; i++) {
			models.push(`iphone${i}`)
			models.push(`iphone${i}mini`)
			models.push(`iphone${i}pro`)
			models.push(`iphone${i}promax`)
		}
		const model = res.model.replace(/\s/g, "").toLowerCase()
		const newModel = model.split('<')[0]
		if (models.includes(model) || models.includes(newModel) || res.safeAreaInsets.bottom > 0) {
			iphonex = true;
		}
		return iphonex;
		// #endif
		return false
	}
	function clear(e: UniEvent) {
		console.log("Clear")
		// #ifdef H5
		e.stopPropagation()
		// #endif
	}
	defineExpose({
		_ref: popupMaskRef,
		open: handleOpen,
		close: handleForceClose
	} as PopupRef)
</script>
<style lang="scss">
	.IPopupMask {
		position: fixed;
		left: 0;
		right: 0;
		top: 0;
		bottom: 0;
		transition-property: opacity, visibility;
		transition-timing-function: ease-in-out;
		transition-duration: 0.3s;
		visibility: hidden;
		overflow: hidden;
		opacity: 0;
		
		.IPopupBody {
			transition-property: transform, opacity, visibility;
			transition-timing-function: ease-in-out;
			transition-duration: 0.3s;
			min-height: 0;
			height: auto;
			overflow: hidden;
			
			&.IPopupBodySafrArea {
				padding-bottom: 35px;
			}
		}
		&.top {
			.IPopupBody {
				transform: translateY(-100%);
				border-bottom-left-radius: 0;
				border-bottom-right-radius: 0;
			}
		}
		&.bottom {
			.IPopupBody {
				transform: translateY(100%);
				border-top-left-radius: 0;
				border-top-right-radius: 0;
			}
		}
		&.left {
			.IPopupBody {
				transform: translateX(-100%);
			}
		}
		&.right {
			.IPopupBody {
				transform: translateX(100%);
			}
		}
		&.center {
			.IPopupBody {
				transform: scaleX(0.7) scaleY(0.7);
			}
		}
		&.reverseCenter {
			.IPopupBody {
				transform: scaleX(1.3) scaleY(1.3);
			}
		}
		&.opacity {
			.IPopupBody {
				transform: none;
				opacity: 0;
			}
		}
	}
</style>
